{"version":3,"sources":["Square.js","Board.js","player.js","instructionButton.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","char","Board","state","squares","Array","fill","xIsNext","lines","i","length","a","b","c","this","slice","setState","clickHandler","className","renderSquare","React","Component","Player","playerID","type","placeholder","playerScore","InstructionButton","text","App","playable","playerOneScore","playerTwoScore","player","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAYeA,EARA,SAAAC,GACX,OACA,wBAAIC,QAASD,EAAMC,SAAUD,EAAME,OCFlBC,E,kDAEjB,WAAYH,GAAO,IAAD,8BACd,cAAMA,IACDI,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJC,E,4DAQAH,GAWd,IAVA,IAAMI,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIT,EAAQO,IAAMP,EAAQO,KAAOP,EAAQQ,IAAMR,EAAQO,KAAOP,EAAQS,GACpE,OAAOT,EAAQO,GAGnB,OAAO,O,mCAIIF,GACX,IAAML,EAAUU,KAAKX,MAAMC,QAAQW,QACnCX,EAAQK,GAAKK,KAAKX,MAAMI,QAAU,IAAM,IACxCO,KAAKE,SAAS,CACVZ,QAASA,EACTG,SAAUO,KAAKX,MAAMI,Y,mCAKhBE,GAAG,IAAD,OACX,OACI,kBAAC,EAAD,CAAQT,QAAU,kBAAI,EAAKiB,aAAaR,IAAIR,KAAQa,KAAKX,MAAMC,QAAQK,O,+BAK3E,OACI,yBAAKS,UAAU,QACX,oCAAS,mCAAT,UAA8B,mCAA9B,UAAmD,oCACnD,+BACI,+BACI,4BACKJ,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAEvB,4BACKL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAEvB,4BACKL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,W,GAlEZC,IAAMC,WCQ1BC,MAVf,SAAgBvB,GACZ,OACI,yBAAKmB,UAAU,UACX,4BAAKnB,EAAMwB,UACX,2BAAOC,KAAK,OAAOC,YAAY,gBAC/B,4BAAK1B,EAAM2B,eCCRC,MANf,SAA2B5B,GACvB,OAAO,yBAAKmB,UAAU,iBAClB,2BAAInB,EAAM6B,QCwCHC,E,kDArCb,WAAY9B,GAAO,IAAD,8BAChB,cAAMA,IACDI,MAAQ,CACX2B,UAAU,EACVvB,SAAS,EACTwB,eAAgB,EAChBC,eAAgB,GANF,E,0DAUJC,GACE,cAAXA,EACDnB,KAAKE,SAAS,CAACe,eAAgBjB,KAAKX,MAAM4B,eAAiB,IAExDjB,KAAKE,SAAS,CAACgB,eAAgBlB,KAAKX,MAAM6B,eAAiB,M,+BAIhE,OACE,yBAAKd,UAAU,aACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAQK,SAAY,aAAcG,YAAW,iBAAcZ,KAAKX,MAAM4B,kBACtE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQR,SAAY,aAAcG,YAAW,iBAAcZ,KAAKX,MAAM6B,mBAGxE,kBAAC,EAAD,CAAmBJ,KAAM,0B,GA5BfP,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,cAAc,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.260841c9.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Square = props => {\n    return (\n    <td onClick={props.onClick}>{props.char}</td>\n    )\n}\n\n\n\nexport default Square\n","import React from 'react'\nimport Square from './Square.js'\n\n\nexport default class Board extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        }\n      }\n    \n      calculateWinner(squares) {\n        const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6, 7, 8],\n          [0, 3, 6],\n          [1, 4, 7],\n          [2, 5, 8],\n          [0, 4, 8],\n          [2, 4, 6],\n        ];\n        for (let i = 0; i < lines.length; i++) {\n          const [a, b, c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n          }\n        }\n        return null;\n      }\n    \n    \n      clickHandler(i){\n        const squares = this.state.squares.slice();\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n      }\n    \n\n    renderSquare(i){\n        return(\n            <Square onClick ={()=>this.clickHandler(i)} char = {this.state.squares[i]}/>\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"main\">\n                <h1>Tic  <span>X</span>  Tac  <span>O</span>  Toe  <span>X</span></h1>\n                <table>\n                    <tbody>\n                        <tr>\n                            {this.renderSquare(0)}\n                            {this.renderSquare(1)}\n                            {this.renderSquare(2)}\n                        </tr>\n                        <tr>\n                            {this.renderSquare(3)}\n                            {this.renderSquare(4)}\n                            {this.renderSquare(5)}\n                        </tr>\n                        <tr>\n                            {this.renderSquare(6)}\n                            {this.renderSquare(7)}\n                            {this.renderSquare(8)}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            \n        )\n    }\n        \n    \n\n\n}\n\n\n\n","import React from 'react'\n\nfunction Player(props){\n    return(\n        <div className=\"player\">\n            <h2>{props.playerID}</h2>\n            <input type=\"text\" placeholder=\"Your name..\"/>\n            <h1>{props.playerScore}</h1>\n        </div>\n    )\n}\n\nexport default Player","import React from 'react'\n\nfunction InstructionButton(props){\n    return(<div className=\"notifyPlayers\">\n        <p>{props.text}</p>\n    </div>)\n}\n\nexport default InstructionButton","import Board from './Board.js'\nimport React, { Component } from 'react'\nimport Player from './player'\nimport InstructionButton from './instructionButton'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      playable: false,\n      xIsNext: false,\n      playerOneScore: 0,\n      playerTwoScore: 0\n    }\n  }\n\n  increaseScore(player){\n    if(player === \"playerOne\"){\n      this.setState({playerOneScore: this.state.playerOneScore + 1})\n    }\n    else{this.setState({playerTwoScore: this.state.playerTwoScore + 1})}\n  }\n  \n  render() {\n    return (\n      <div className=\"interface\">\n        <div className=\"game\">\n          <Player playerID = {'Player One'} playerScore = {`Score: ${this.state.playerOneScore}`}/>\n          <Board/>\n          <Player playerID = {'Player Two'} playerScore = {`Score: ${this.state.playerTwoScore}`}/>\n        </div>\n        \n        <InstructionButton text={'Click me to Play'}/>\n      </div>\n      \n\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('body')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}