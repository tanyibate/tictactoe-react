{"version":3,"sources":["Square.js","Board.js","player.js","instructionButton.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","onClick","char","Board","i","clickHandler","this","squares","className","renderSquare","React","Component","Player","playerID","type","placeholder","playerScore","InstructionButton","text","App","instructionTextHandler","gameState","winner","setState","instruction","playable","gameEnded","xIsNext","console","log","state","makePlayable","Array","fill","changeXisNext","slice","calculateWinner","increaseScore","bind","playerOneScore","playerTwoScore","player","lines","length","a","b","c","increase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b02b5c92.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Square = props => {\n    return (\n    <td onClick={props.onClick}>{props.char}</td>\n    )\n}\n\n\n\nexport default Square\n","import React from 'react'\nimport Square from './Square.js'\n\n\nexport default class Board extends React.Component{\n\n\n    renderSquare(i){\n        return(\n            <Square onClick ={()=>this.props.clickHandler(i)} char = {this.props.squares[i]}/>\n        )\n    }\n\n    render(){\n        return(\n            <div className=\"main\">\n                <h1>Tic  <span>X</span>  Tac  <span>O</span>  Toe  <span>X</span></h1>\n                <table>\n                    <tbody>\n                        <tr>\n                            {this.renderSquare(0)}\n                            {this.renderSquare(1)}\n                            {this.renderSquare(2)}\n                        </tr>\n                        <tr>\n                            {this.renderSquare(3)}\n                            {this.renderSquare(4)}\n                            {this.renderSquare(5)}\n                        </tr>\n                        <tr>\n                            {this.renderSquare(6)}\n                            {this.renderSquare(7)}\n                            {this.renderSquare(8)}\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            \n        )\n    }\n        \n    \n\n\n}\n\n\n\n","import React from 'react'\n\nfunction Player(props){\n    return(\n        <div className=\"player\">\n            <h2>{props.playerID}</h2>\n            <input type=\"text\" placeholder=\"Your name..\"/>\n            <h1>{props.playerScore}</h1>\n        </div>\n    )\n}\n\nexport default Player","import React from 'react'\n\nfunction InstructionButton(props){\n    return(<div className=\"notifyPlayers\" onClick ={props.onClick}>\n        <p>{props.text}</p>\n    </div>)\n}\n\nexport default InstructionButton","import Board from './Board.js'\nimport React, { Component } from 'react'\nimport Player from './player'\nimport InstructionButton from './instructionButton'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.increaseScore = this.increaseScore.bind(this);\n    this.state = {\n      \n      playable: false,\n      gameEnded: false,\n      xIsNext: true,\n      instruction: 'Click me to Play',\n      playerOneScore: 0,\n      playerTwoScore: 0,\n      squares: Array(9).fill(null),\n    }\n  }\n\n  increaseScore(player){\n    console.log(this)\n    if(player === \"playerOne\"){\n      this.setState({playerOneScore: this.state.playerOneScore + 1})\n    }\n    else{this.setState({playerTwoScore: this.state.playerTwoScore + 1})}\n  }\n\n  instructionTextHandler = (gameState,winner = null) =>{\n    switch(gameState){\n      case \"playerOneTurn\":\n        this.setState({instruction: \"It's Player 1's Turn\"})\n        break;\n      case \"playerTwoTurn\":\n        this.setState({instruction: \"It's Player 2's Turn\"})\n        break;\n      case \"gameEnded\":\n        this.setState({\n          instruction: `${winner} won the game, play again?`,\n          playable: false,\n          gameEnded: true,\n          xIsNext: true\n\n        })\n        console.log(this.state.instruction)\n        break;\n      default:\n        return\n    }\n\n  }\n\n  makePlayable = () =>{\n    if(this.state.gameEnded){\n      const squares = Array(9).fill(null)\n      this.setState({squares: squares })}\n    if(!this.state.playable){\n      this.setState({\n        playable: true,\n        instruction: \"Player 1's turn\"\n      })\n    }\n    \n  }\n\n  changeXisNext = () =>{\n    if(this.state.xIsNext) this.setState({instruction: \"Player 2's turn\"})\n    else this.setState({instruction: \"Player 1's turn\"})\n    this.setState({xIsNext: !this.state.xIsNext})\n    console.log(this.state.xIsNext)\n  }\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      let winner = 'playerOne';\n      \n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        console.log(\"Hello\")\n\n        if(squares[a] === 'X') winner = \"playerOne\";\n        else winner = 'playerTwo';\n        let increase = this.increaseScore;\n        increase(winner);\n        this.instructionTextHandler(\"gameEnded\",winner)\n        \n      }\n    }\n    \n  }\n\n\n  clickHandler = (i) => {\n    if(this.state.playable && !this.state.squares[i]){\n        const squares = this.state.squares.slice();\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            \n        });\n    this.changeXisNext()\n    this.calculateWinner(squares)\n    \n    }\n    \n  }\n\n\n \n  \n  render() {\n    return (\n      <div className=\"interface\">\n        <div className=\"game\">\n          <Player playerID = {'Player One'} playerScore = {`Score: ${this.state.playerOneScore}`}/>\n          <Board increaseScore={this.increaseScore} \n           \n          squares={this.state.squares}\n          clickHandler = {this.clickHandler}/>\n          <Player playerID = {'Player Two'} playerScore = {`Score: ${this.state.playerTwoScore}`}/>\n        </div>\n        \n        <InstructionButton text={this.state.instruction} onClick = {this.makePlayable}/>\n      </div>\n      \n\n    )\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('body')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}